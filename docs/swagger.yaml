basePath: '{{.BasePath}}'
definitions:
  auth.CreateAccessTokenRequest:
    properties:
      password:
        example: <password>
        type: string
      user_name:
        example: <user name>
        type: string
    required:
    - password
    - user_name
    type: object
  auth.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      type:
        type: string
    type: object
  common.APIError:
    properties:
      message:
        type: string
    type: object
  common.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/common.APIError'
        type: array
    type: object
  todo.CreateTodoRequest:
    properties:
      contents:
        example: <new contents>
        type: string
      title:
        example: <new title>
        type: string
    required:
    - contents
    - title
    type: object
  todo.TodoResponse:
    properties:
      contents:
        type: string
      create_at:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      password:
        example: <new password>
        type: string
      user_name:
        example: <new user name>
        type: string
    required:
    - password
    - user_name
    type: object
  user.UpdateUserRequest:
    properties:
      user_name:
        example: <new user name>
        type: string
    type: object
  user.UserResponse:
    properties:
      create_at:
        type: string
      id:
        type: integer
      user_name:
        type: string
    type: object
host: '{{.Host}}'
info:
  contact:
    email: gyuhwan.a.kim@gmail.com
    name: API Support
  description: This is a sample gin starter server.
  license:
    name: MIT
    url: https://github.com/gghcode/go-gin-starterkit/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Go Gin Starter API
  version: "1.0"
paths:
  /api/healthy:
    get:
      description: Get server healthy
      responses:
        "200": {}
      tags:
      - App API
  /api/oauth2/token:
    post:
      consumes:
      - application/json
      description: Get new access token
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.CreateAccessTokenRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/auth.TokenResponse'
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
        "401":
          description: Invalid credential
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - Auth API
  /api/todos:
    get:
      consumes:
      - application/json
      description: Get all todos
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/todo.TodoResponse'
            type: array
      tags:
      - Todo API
    post:
      consumes:
      - application/json
      description: Create new todo
      parameters:
      - description: todo payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/todo.CreateTodoRequest'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/todo.TodoResponse'
            type: object
        "400":
          description: Invalid todo payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - Todo API
  /api/todos/{id}:
    delete:
      description: Remove todo by todo id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/todo.TodoResponse'
            type: object
        "404":
          description: Not found entity
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - Todo API
    get:
      description: Get todo by todo id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/todo.TodoResponse'
            type: object
        "404":
          description: Not found entity
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - Todo API
    put:
      description: Update todo by todo id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      - description: todo payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/todo.CreateTodoRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/todo.TodoResponse'
            type: object
        "400":
          description: Invalid todo payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
        "404":
          description: Not found entity
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - Todo API
  /api/users:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: user payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "400":
          description: Invalid user payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
  /api/users/{id}:
    delete:
      description: Remove user by user id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "404":
          description: Not found entity
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
    put:
      consumes:
      - application/json
      description: Update new user by user id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: user payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "400":
          description: Invalid user payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
        "404":
          description: Not found entity
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
  /api/users/{username}:
    get:
      description: Get user by username
      parameters:
      - description: User Name
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "404":
          description: Not found entity
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
securityDefinitions:
  "":
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
